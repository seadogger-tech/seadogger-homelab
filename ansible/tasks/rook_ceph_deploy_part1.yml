---
# Step 1: Handle macOS fork safety
- name: Detect operating system
  ansible.builtin.set_fact:
    is_macos: "{{ ansible_facts['os_family'] == 'Darwin' }}"

- name: Set Python fork safety for macOS
  ansible.builtin.set_fact:
    ansible_python_interpreter: "python3 -E"
    env_vars:
      OBJC_DISABLE_INITIALIZE_FORK_SAFETY: "YES"
      KUBECONFIG: /etc/rancher/k3s/k3s.yaml
  when: is_macos | bool

- name: Set Linux environment variables
  ansible.builtin.set_fact:
    env_vars:
      KUBECONFIG: /etc/rancher/k3s/k3s.yaml
  when: not is_macos | bool

# Step 2: Set KUBECONFIG globally
- name: Set KUBECONFIG global
  ansible.builtin.set_fact:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml

- name: Wait for all nodes to become Ready
  ansible.builtin.shell:
    cmd: |
      set -euo pipefail
      kubectl wait --for=condition=Ready --timeout=600s node --all
    executable: /bin/bash
  environment: "{{ env_vars }}"
  register: node_wait
  changed_when: false

- name: Assert no nodes are cordoned (unschedulable)
  ansible.builtin.shell:
    cmd: |
      set -euo pipefail
      # returns nonzero if any line equals 'true'
      ! kubectl get nodes -o jsonpath='{range .items[*]}{.spec.unschedulable}{"\n"}{end}' | grep -Fxq true
    executable: /bin/bash
  environment: "{{ env_vars }}"
  register: schedulable_check
  changed_when: false

# Step 3: Add Helm repo using shell to avoid fork issues
- name: Add Rook Helm repo
  ansible.builtin.shell:
    cmd: helm repo add rook-release https://charts.rook.io/release && helm repo update
  environment: "{{ env_vars }}"
  changed_when: false

# Step 4: Install operator
- name: Install Rook-Ceph Operator
  ansible.builtin.shell:
    cmd: >-
      helm upgrade --install rook-ceph rook-release/rook-ceph
      --namespace rook-ceph
      --create-namespace
      -f https://raw.githubusercontent.com/seadogger/seadogger-homelab/master/deployments/rook-ceph/rook-ceph-operator-values.yaml
      --wait
  environment: "{{ env_vars }}"
  register: helm_operator_result
  changed_when: "'STATUS: deployed' in helm_operator_result.stdout or 'STATUS: upgraded' in helm_operator_result.stdout"

# Step 5: Wait for operator to be ready
- name: Wait for operator to be ready
  ansible.builtin.shell:
    cmd: kubectl -n rook-ceph wait --for=condition=ready pod -l app=rook-ceph-operator --timeout=300s
  environment: "{{ env_vars }}"
  register: wait_result
  retries: 10
  delay: 30
  until: wait_result.rc == 0

# Step 6: Install cluster
- name: Create Ceph Dashboard Password Secret
  kubernetes.core.k8s:
    kubeconfig: "{{ KUBECONFIG }}"
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: rook-ceph-dashboard-password
        namespace: rook-ceph
      type: Opaque
      stringData:
        password: "{{ dashboard_password }}"

- name: Install Rook-Ceph Cluster (without filesystem)
  ansible.builtin.shell:
    cmd: >-
      helm upgrade --install rook-ceph-cluster rook-release/rook-ceph-cluster
      --namespace rook-ceph
      -f https://raw.githubusercontent.com/seadogger/seadogger-homelab/master/deployments/rook-ceph/rook-ceph-cluster-values.yaml
      --wait
  environment: "{{ env_vars }}"
  register: helm_cluster_result
  changed_when: "'STATUS: deployed' in helm_cluster_result.stdout or 'STATUS: upgraded' in helm_cluster_result.stdout"

- name: Display message about Ceph cluster readiness time
  ansible.builtin.debug:
    msg: |
      Waiting for the Ceph cluster to become ready. This may take 15â€“20 minutes depending on your system performance.
      Do not proceed with any other deployments until this step completes successfully.

- name: Check if toolbox is enabled (pod exists)
  ansible.builtin.shell: |
    kubectl -n rook-ceph get pods -l app=rook-ceph-tools --no-headers | wc -l
  environment: "{{ env_vars }}"
  register: toolbox_count
  changed_when: false

- name: Wait for rook-ceph-tools (toolbox) pod to be Ready
  ansible.builtin.shell: |
    kubectl -n rook-ceph wait --for=condition=Ready pod -l app=rook-ceph-tools --timeout=600s
  environment: "{{ env_vars }}"
  when: toolbox_count.stdout | int > 0
  register: toolbox_ready
  retries: 30
  delay: 10
  until: toolbox_ready.rc == 0

- name: Wait for ceph-mgr to be available
  ansible.builtin.shell: |
    kubectl -n rook-ceph wait --for=condition=Ready pod -l app=rook-ceph-mgr --timeout=300s
  environment: "{{ env_vars }}"
  register: mgr_ready
  retries: 60
  delay: 10
  until: mgr_ready.rc == 0

- name: Wait for Ceph health to be OK or WARN
  ansible.builtin.shell: |
    kubectl -n rook-ceph exec "$(kubectl -n rook-ceph get pods -l app=rook-ceph-tools -o name | head -n1)" -- \
      sh -lc 'ceph health | grep -Eq "HEALTH_OK|HEALTH_WARN"'
  register: health_ok_or_warn
  retries: 60
  delay: 30
  until: health_ok_or_warn.rc == 0
  changed_when: false

- name: Wait until CephFS pools exist
  ansible.builtin.shell: |
    set -e
    POD="$(kubectl -n rook-ceph get pods -l app=rook-ceph-tools -o jsonpath='{.items[0].metadata.name}')"
    kubectl -n rook-ceph exec "$POD" -- sh -lc '
      ceph osd pool ls | grep -qw ceph-fs-metadata &&
      ceph osd pool ls | grep -qw ceph-fs-data-replicated &&
      ceph osd pool ls | grep -qw ceph-fs-data-ec
    '
  environment: "{{ env_vars }}"
  register: pools_exist
  retries: 60
  delay: 10
  until: pools_exist.rc == 0
  changed_when: false

- name: Unset all default StorageClasses
  ansible.builtin.shell: |
    for sc in $(kubectl get storageclass -o jsonpath='{.items[*].metadata.name}'); do
      kubectl patch storageclass "$sc" -p '{"metadata": {"annotations": {"storageclass.kubernetes.io/is-default-class": "false"}}}' || true
    done
  environment: "{{ env_vars }}"

- name: Set ceph-block-data as default StorageClass
  ansible.builtin.shell: |
    kubectl patch storageclass ceph-block-data -p '{"metadata": {"annotations": {"storageclass.kubernetes.io/is-default-class": "true"}}}'
  environment: "{{ env_vars }}"

- name: Create CephFS Erasure Coded StorageClass
  kubernetes.core.k8s:
    kubeconfig: "{{ KUBECONFIG }}"
    state: present
    src: "https://raw.githubusercontent.com/seadogger/seadogger-homelab/refs/heads/master/deployments/rook-ceph/rook-ceph-ec-storage-class.yaml"

- name: Wait for ceph-fs-data-ec StorageClass to exist
  kubernetes.core.k8s_info:
    kubeconfig: "{{ KUBECONFIG }}"
    kind: StorageClass
    name: ceph-fs-data-ec
  register: sc_ec_status
  until: sc_ec_status.resources | length > 0
  retries: 10
  delay: 5

- name: Download CEPH IngressRoutes manifest from GitHub
  ansible.builtin.get_url:
    url: "https://raw.githubusercontent.com/seadogger/seadogger-homelab/master/ingress/traefik-ceph-dashboard-ingress.yml"
    dest: "/tmp/traefik-ceph-dashboard-ingress.yml"
    mode: "0644"

- name: Apply CEPH IngressRoutes (no Helm/Argo)
  kubernetes.core.k8s:
    kubeconfig: "{{ KUBECONFIG }}"
    state: present
    src: "/tmp/traefik-ceph-dashboard-ingress.yml"
