- name: Create CephNFS server
  ansible.builtin.k8s:
    kubeconfig: "/etc/rancher/k3s/k3s.yaml"
    state: present
    definition:
      apiVersion: ceph.rook.io/v1
      kind: CephNFS
      metadata:
        name: nfs-cephfs
        namespace: rook-ceph
      spec:
        rados:
          pool: .nfs
          namespace: nfs-ec
        server:
          active: 1

- name: Wait for CephNFS resource to be created
  ansible.builtin.shell: |
    kubectl -n rook-ceph get cephnfs nfs-cephfs
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml
  register: nfs_resource
  retries: 30
  delay: 10
  until: nfs_resource.rc == 0
  changed_when: false

- name: Wait for NFS Ganesha deployment to be ready
  ansible.builtin.shell: |
    kubectl -n rook-ceph wait --for=condition=Available deployment/rook-ceph-nfs-nfs-cephfs-a --timeout=300s
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml
  register: nfs_deployment
  retries: 30
  delay: 10
  until: nfs_deployment.rc == 0
  changed_when: false
  tags:
    - rook_ceph

- name: Ensure CephFS subvolumegroup nfs exists
  ansible.builtin.shell:
    cmd: |
      set -euo pipefail
      P=$(kubectl -n rook-ceph get pods -l app=rook-ceph-tools -o name | head -n1)
      # create if missing; ignore EEXIST
      kubectl -n rook-ceph exec "$P" -- sh -lc 'ceph fs subvolumegroup create ceph-fs nfs 2>/dev/null || true'
    executable: /bin/bash
  changed_when: false

- name: Ensure CephFS subvolume nfs-cephfs-6t exists in group nfs
  ansible.builtin.shell:
    cmd: |
      set -euo pipefail
      P=$(kubectl -n rook-ceph get pods -l app=rook-ceph-tools -o name | head -n1)
      kubectl -n rook-ceph exec "$P" -- sh -lc '
        ceph fs subvolume info ceph-fs nfs-cephfs-6t --group_name nfs >/dev/null 2>&1 || \
        ceph fs subvolume create ceph-fs nfs-cephfs-6t --group_name nfs
      '
    executable: /bin/bash
  changed_when: false
  retries: 5
  delay: 2

- name: Resolve CephFS subvolume path from MDS (authoritative)
  ansible.builtin.shell:
    cmd: |
      set -euo pipefail
      P=$(kubectl -n rook-ceph get pods -l app=rook-ceph-tools -o name | head -n1)
      kubectl -n rook-ceph exec "$P" -- \
        ceph fs subvolume getpath ceph-fs nfs-cephfs-6t --group_name nfs
    executable: /bin/bash
  register: subvol_path
  retries: 5
  delay: 2
  until: subvol_path.rc == 0 and (subvol_path.stdout | trim) != ""

- name: Use resolved CephFS path for export
  ansible.builtin.set_fact:
    nfs_export_path: "{{ subvol_path.stdout | trim }}"

- name: Ensure .nfs pool has correct replica size
  ansible.builtin.shell:
    cmd: |
      set -euo pipefail
      TOOLS_POD=$(kubectl -n rook-ceph get pods -l app=rook-ceph-tools -o name | head -n1)
      kubectl -n rook-ceph exec "$TOOLS_POD" -- bash -lc '
        cur=$(ceph osd pool get .nfs size 2>/dev/null | awk "/size:/ {print \$2}" || echo "")
        [ "$cur" = "3" ] || ceph osd pool set .nfs size 3
        curmin=$(ceph osd pool get .nfs min_size 2>/dev/null | awk "/min_size:/ {print \$2}" || echo "")
        [ "$curmin" = "2" ] || ceph osd pool set .nfs min_size 2
      '
    executable: /bin/bash
  changed_when: false
  tags:
    - rook_ceph

- name: Create/ensure cephx user for NFS export with full CephFS caps
  ansible.builtin.shell:
    cmd: |
      set -euo pipefail
      P=$(kubectl -n rook-ceph get pods -l app=rook-ceph-tools -o name | head -n1)
      kubectl -n rook-ceph exec "$P" -- \
        ceph auth get-or-create client.nfs.nfs-cephfs \
          mon 'allow r' \
          mgr 'allow r' \
          mds "allow rw fsname=ceph-fs" \
          osd "allow rw pool=.nfs namespace=nfs-cephfs" \
          osd "allow rw tag cephfs data=ceph-fs" \
          osd "allow rw tag cephfs metadata=ceph-fs"
    executable: /bin/bash
  changed_when: false

- name: Fetch raw cephx key for Ganesha (no brackets)
  ansible.builtin.shell:
    cmd: |
      set -euo pipefail
      P=$(kubectl -n rook-ceph get pods -l app=rook-ceph-tools -o name | head -n1)
      kubectl -n rook-ceph exec "$P" -- ceph auth get-key client.nfs.nfs-cephfs
    executable: /bin/bash
  register: nfs_key_raw
  changed_when: false

- name: Set cephx and FSAL ids + clean key
  ansible.builtin.set_fact:
    cephx_user_id: "client.nfs.nfs-cephfs"
    fsal_user_id: "nfs.nfs-cephfs"
    nfs_user_key: "{{ nfs_key_raw.stdout | trim }}"
  tags:
    - rook_ceph

- name: Automate RADOS export via ceph-tools (idempotent)
  ansible.builtin.shell:
    cmd: |
      set -euo pipefail
      TOOLS_POD=$(kubectl -n rook-ceph get pods -l app=rook-ceph-tools -o name | head -n1)

      # Create export content *inside* the tools pod to avoid races
      kubectl -n rook-ceph exec "$TOOLS_POD" -- sh -lc "cat > /tmp/export-100 <<EOF
      EXPORT {
        Export_Id = 100;
        Path = \"{{ nfs_export_path }}\";
        Pseudo = \"/cephfs\";
        Access_Type = RW;
        Squash = None;
        Protocols = 4;
        Transports = TCP;
        SecType = sys;
        FSAL {
          Name = CEPH;
          User_Id = \"{{ fsal_user_id }}\";
          Secret_Access_Key = \"{{ nfs_user_key }}\";
          Filesystem = \"ceph-fs\";
        }
      }
      EOF"

      # Put the export object into RADOS from the tools pod
      kubectl -n rook-ceph exec "$TOOLS_POD" -- \
        rados -p .nfs --namespace nfs-cephfs put export-100 /tmp/export-100

      # Idempotently ensure the main config includes the export URL
      kubectl -n rook-ceph exec "$TOOLS_POD" -- sh -lc '
        set -e
        # Get current config, or create if non-existent
        rados -p .nfs --namespace nfs-cephfs get conf-nfs.nfs-cephfs /tmp/conf-nfs.nfs-cephfs || : > /tmp/conf-nfs.nfs-cephfs

        # Add the include URL if it is not already present
        if ! grep -q "rados://.nfs/nfs-cephfs/export-100" /tmp/conf-nfs.nfs-cephfs; then
          printf "%s\n" "%url \"rados://.nfs/nfs-cephfs/export-100\"" >> /tmp/conf-nfs.nfs-cephfs
        fi

        # Write the updated config back to RADOS
        rados -p .nfs --namespace nfs-cephfs put conf-nfs.nfs-cephfs /tmp/conf-nfs.nfs-cephfs
      '

      # Show final objects for verification
      kubectl -n rook-ceph exec "$TOOLS_POD" -- \
        rados -p .nfs --namespace nfs-cephfs ls | sort
    executable: /bin/bash
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml
  register: rados_export
  retries: 5
  delay: 6
  until: rados_export.rc == 0
  tags:
    - rook_ceph

- name: Verify cephx caps include the export path and filesystem
  ansible.builtin.shell:
    cmd: |
      kubectl -n rook-ceph exec "$(kubectl -n rook-ceph get pods -l app=rook-ceph-tools -o name | head -n1)" -- \
        sh -lc 'ceph auth get "{{ cephx_user_id }}"'
    executable: /bin/bash
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml
  register: cephx_user_caps
  changed_when: false
  failed_when: cephx_user_caps.rc != 0 or 'fsname=ceph-fs' not in cephx_user_caps.stdout
  tags:
    - rook_ceph

- name: Inject NFSv4 macOS compatibility (enable v4.0) into RADOS (fixed heredoc)
  ansible.builtin.shell:
    cmd: |
      set -euo pipefail
      TOOLS_POD=$(kubectl -n rook-ceph get pods -l app=rook-ceph-tools -o name | head -n1)
      # Write correct multi-line content (no backslashes)
      kubectl -n rook-ceph exec "$TOOLS_POD" -- sh -lc 'cat > /tmp/nfsv4-macos.conf << "EOF"
      NFS_Core_Param {
        fsid_device = true;
      }
      NFSV4 {
        graceless = true;
        Minor_Versions = 0,1,2;
      }
      EOF'
      # Overwrite the object
      kubectl -n rook-ceph exec "$TOOLS_POD" -- \
        rados -p .nfs --namespace nfs-cephfs put nfsv4-macos /tmp/nfsv4-macos.conf
    executable: /bin/bash
  changed_when: false

- name: Ensure conf-nfs.nfs-cephfs includes nfsv4-macos BEFORE export include
  ansible.builtin.shell:
    cmd: |
      set -euo pipefail
      TOOLS_POD=$(kubectl -n rook-ceph get pods -l app=rook-ceph-tools -o name | head -n1)
      kubectl -n rook-ceph exec "$TOOLS_POD" -- sh -lc '
        rados -p .nfs --namespace nfs-cephfs get conf-nfs.nfs-cephfs /tmp/conf || : > /tmp/conf
        if ! grep -q "rados://.nfs/nfs-cephfs/nfsv4-macos" /tmp/conf; then
          # Prepend so global settings load before exports
          printf "%s\n%s\n" "%url \"rados://.nfs/nfs-cephfs/nfsv4-macos\"" "$(cat /tmp/conf)" > /tmp/conf
        fi
        rados -p .nfs --namespace nfs-cephfs put conf-nfs.nfs-cephfs /tmp/conf
      '
    executable: /bin/bash
  changed_when: false

- name: Restart NFS Ganesha pods to apply configuration
  ansible.builtin.command: >
    kubectl delete pod -n rook-ceph -l app=rook-ceph-nfs,ceph_nfs=nfs-cephfs
  changed_when: true
  tags:
    - rook_ceph

- name: Wait for NFS Ganesha deployment to be ready after restart
  ansible.builtin.shell: |
    kubectl -n rook-ceph wait --for=condition=Available deployment/rook-ceph-nfs-nfs-cephfs-a --timeout=300s
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml
  register: nfs_deployment_restart
  retries: 30
  delay: 10
  until: nfs_deployment_restart.rc == 0
  changed_when: false
  tags:
    - rook_ceph

- name: Verify Ganesha loaded export-100 from RADOS
  ansible.builtin.shell:
    cmd: |
      set -Eeuo pipefail
      POD=$(kubectl -n rook-ceph get pods -l app=rook-ceph-nfs,ceph_nfs=nfs-cephfs -o jsonpath='{.items[*].metadata.name}' | awk '{print $1}')
      [ -n "$POD" ]
      kubectl -n rook-ceph logs "$POD" -c nfs-ganesha --since=15m \
        | grep -E -i 'Export[^0-9]*100|Export .* created .* pseudo \(/cephfs\)|export.*pseudo.*/cephfs'
    executable: /bin/bash
  register: ganesha_loaded
  retries: 12
  delay: 5
  until: ganesha_loaded.rc == 0
  changed_when: false
  tags:
    - rook_ceph

- name: Create NFS StorageClass
  ansible.builtin.k8s:
    kubeconfig: "/etc/rancher/k3s/k3s.yaml"
    state: present
    definition:
      apiVersion: storage.k8s.io/v1
      kind: StorageClass
      metadata:
        name: rook-ceph-nfs
      provisioner: rook-ceph.nfs.csi.ceph.com
      reclaimPolicy: Retain
      parameters:
        server: "rook-nfs-loadbalancer.rook-ceph.svc.cluster.local"
        share: "/cephfs"
        clusterID: rook-ceph
        csi.storage.k8s.io/provisioner-secret-name: rook-csi-nfs-provisioner
        csi.storage.k8s.io/provisioner-secret-namespace: rook-ceph
        csi.storage.k8s.io/node-stage-secret-name: rook-csi-nfs-node
        csi.storage.k8s.io/node-stage-secret-namespace: rook-ceph

- name: Create NFS LoadBalancer Service
  ansible.builtin.k8s:
    kubeconfig: "/etc/rancher/k3s/k3s.yaml"
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: rook-nfs-loadbalancer
        namespace: rook-ceph
      spec:
        type: LoadBalancer
        loadBalancerIP: "192.168.1.254"
        selector:
          app: rook-ceph-nfs
          ceph_nfs: nfs-cephfs
        ports:
        - name: nfs
          port: 2049
          protocol: TCP
          targetPort: 2049
