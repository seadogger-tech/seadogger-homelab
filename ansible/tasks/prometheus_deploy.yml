---
# Step 1: Set KUBECONFIG globally
- name: Set KUBECONFIG global
  ansible.builtin.set_fact:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml

# Step 2: Delete existing Prometheus namespace if it exists
- name: Delete existing Prometheus namespace
  ansible.builtin.k8s:
    kubeconfig: "{{ KUBECONFIG }}"
    state: absent
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: monitoring
  ignore_errors: true

# Step 3: Wait for namespace deletion
- name: Wait for namespace deletion
  ansible.builtin.pause:
    seconds: 30

# Step 4: Create new Prometheus namespace
- name: Create Prometheus namespace
  ansible.builtin.k8s:
    kubeconfig: "{{ KUBECONFIG }}"
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: monitoring

# Step 5: Create ArgoCD Prometheus CRDs Application, this is needed as there are race conditions with the creation of the CRDs and the Application stack using a single helm chart with ArgoCD
- name: Create Prometheus CRDs ArgoCD Application
  ansible.builtin.k8s:
    kubeconfig: "{{ KUBECONFIG }}"
    state: present
    definition:
      apiVersion: argoproj.io/v1alpha1
      kind: Application
      metadata:
        name: prometheus-crds
        namespace: argocd
      spec:
        project: default
        source:
          chart: kube-prometheus-stack
          repoURL: https://prometheus-community.github.io/helm-charts
          targetRevision: "68.4.4"
          helm:
            skipCrds: false
            values: |
              fullnameOverride: prometheus
              defaultRules:
                create: false
              alertmanager:
                enabled: false
              grafana:
                enabled: false
              kubeApiServer:
                enabled: false
              kubelet:
                enabled: false
              kubeControllerManager:
                enabled: false
              coreDns:
                enabled: false
              kubeEtcd:
                enabled: false
              kubeScheduler:
                enabled: false
              kubeProxy:
                enabled: false
              kubeStateMetrics:
                enabled: false
              nodeExporter:
                enabled: false
              prometheus:
                enabled: false
              prometheusOperator:
                enabled: false
        destination:
          server: https://kubernetes.default.svc
          namespace: monitoring
        syncPolicy:
          syncOptions:
            - CreateNamespace=true
            - Replace=true

# Add a pause to ensure resources are fully ready
- name: Additional wait for resources to settle
  ansible.builtin.pause:
    seconds: 60

# Step 7: Create main Prometheus ArgoCD Application
- name: Create main Prometheus ArgoCD Application
  ansible.builtin.k8s:
    kubeconfig: "{{ KUBECONFIG }}"
    state: present
    definition:
      apiVersion: argoproj.io/v1alpha1
      kind: Application
      metadata:
        name: prometheus
        namespace: argocd
      spec:
        project: default
        source:
          repoURL: https://prometheus-community.github.io/helm-charts
          chart: kube-prometheus-stack
          targetRevision: "68.4.4"
          helm:
            valueFiles:
              - https://raw.githubusercontent.com/seadogger/seadogger-homelab/master/helm-deployments/prometheus/prometheus-values.yaml
            skipCrds: true
        destination:
          server: https://kubernetes.default.svc
          namespace: monitoring
        syncPolicy:
          automated:
            prune: true
            selfHeal: true
          syncOptions:
            - CreateNamespace=true

# Step 8: Wait for main Prometheus deployment
- name: Wait for main Prometheus deployment
  ansible.builtin.pause:
    minutes: 2