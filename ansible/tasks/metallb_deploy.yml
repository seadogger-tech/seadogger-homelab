---
# This playbook deploys MetalLB using ArgoCD

# This playbook deploys MetalLB using ArgoCD

# Step 1: Set KUBECONFIG globally
- name: Set KUBECONFIG global
  ansible.builtin.set_fact:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml

# Step 2: Create ArgoCD MetalLB Application
- name: Create MetalLB ArgoCD Application
  ansible.builtin.k8s:
    kubeconfig: "{{ KUBECONFIG }}"
    state: present
    definition:
      apiVersion: argoproj.io/v1alpha1
      kind: Application
      metadata:
        name: metallb
        namespace: argocd
      spec:
        project: default
        source:
          repoURL: https://metallb.github.io/metallb
          chart: metallb
          targetRevision: "*"
        destination:
          server: https://kubernetes.default.svc
          namespace: metallb-system
        syncPolicy:
          automated:
            prune: true
            selfHeal: true
          syncOptions:
            - CreateNamespace=true

# Step 6: Create ArgoCD Application for MetalLB IP Configuration
- name: Create MetalLB IP Pool ArgoCD Application
  ansible.builtin.k8s:
    kubeconfig: "{{ KUBECONFIG }}"
    state: present
    definition:
      apiVersion: argoproj.io/v1alpha1
      kind: Application
      metadata:
        name: metallb-config
        namespace: argocd
      spec:
        project: default
        source:
          repoURL: https://github.com/seadogger/seadogger-homelab
          path: helm-deployments/metallb  # Ensure this path contains the metallb-values.yaml file as a manifest
          targetRevision: HEAD
        destination:
          server: https://kubernetes.default.svc
          namespace: metallb-system
        syncPolicy:
          automated:
            prune: true
            selfHeal: true
          syncOptions:
            - CreateNamespace=true

# Step 7: Wait for MetalLB controller Deployment to be available
- name: Wait for MetalLB controller Deployment to be available
  community.kubernetes.k8s_info:
    kubeconfig: "{{ KUBECONFIG }}"
    kind: Deployment
    namespace: metallb-system
  register: metallb_controller
  retries: 30
  delay: 30
  until: >
    metallb_controller.resources | selectattr('metadata.name', 'search', 'controller') | selectattr('status.availableReplicas', 'defined') | list | length > 0

- name: Wait for MetalLB speaker DaemonSet to be ready
  community.kubernetes.k8s_info:
    kubeconfig: "{{ KUBECONFIG }}"
    kind: DaemonSet
    namespace: metallb-system
  register: metallb_speaker
  retries: 24
  delay: 10
  until: >
    metallb_speaker.resources | selectattr('metadata.name', 'search', 'speaker') | selectattr('status.numberReady', 'defined') | list | length > 0
