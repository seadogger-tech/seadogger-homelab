- name: Check if we should wipe K3s cluster
  ansible.builtin.fail:
    msg: "Wipe K3s cluster is disabled in config.yml. Set 'enable_wipe_k3s_cluster: true' to run."
  when: not enable_wipe_k3s_cluster | default(false)

- name: Ensure iptables is installed
  ansible.builtin.apt:
    name: iptables
    state: present
    update_cache: yes
  become: true

- name: "Check if k3s-agent service exists"
  ansible.builtin.stat:
    path: /etc/systemd/system/k3s-agent.service
  register: k3s_agent_service

- name: "Stop k3s-agent on worker nodes"
  ansible.builtin.systemd:
    name: k3s-agent
    state: stopped
  when: "inventory_hostname in groups['nodes'] and k3s_agent_service.stat.exists"

- name: "Check if k3s service exists"
  ansible.builtin.stat:
    path: /etc/systemd/system/k3s.service
  register: k3s_service

- name: "Stop k3s on control plane"
  ansible.builtin.systemd:
    name: k3s
    state: stopped
  when: "inventory_hostname in groups['control_plane'] and k3s_service.stat.exists"

- name: "Check if k3s-agent-uninstall.sh exists"
  ansible.builtin.stat:
    path: /usr/local/bin/k3s-agent-uninstall.sh
  register: k3s_agent_uninstall_script

- name: "Uninstall k3s agent if present"
  ansible.builtin.command:
    cmd: /usr/local/bin/k3s-agent-uninstall.sh
  when: "inventory_hostname in groups['nodes'] and k3s_agent_uninstall_script.stat.exists"

- name: "Wait for all k3s-agent processes to terminate"
  ansible.builtin.pause:
    seconds: 10

- name: "Check if k3s-uninstall.sh exists"
  ansible.builtin.stat:
    path: /usr/local/bin/k3s-uninstall.sh
  register: k3s_uninstall_script

- name: "Uninstall k3s if present"
  ansible.builtin.command:
    cmd: /usr/local/bin/k3s-uninstall.sh
  when: "inventory_hostname in groups['control_plane'] and k3s_uninstall_script.stat.exists"

- name: "Wait for all k3s processes to terminate"
  ansible.builtin.pause:
    seconds: 10

- name: Clean Kubernetes and storage directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/rancher
    - /var/lib/rancher
    - /var/lib/kubelet
    - /var/lib/rook
    - /var/lib/longhorn
    - /var/lib/ceph
    - /var/log/containers
    - /var/log/pods
    - /var/log/ceph
    - /opt/rook
    - /opt/ceph
    - /root/.kube
    - /var/lib/cni
    - /etc/cni
    - /run/containerd
    - /var/lib/containerd
    - /root/pki
    - /tmp/*

- name: Remove sysctl config for Kubernetes CRI
  ansible.builtin.file:
    path: /etc/sysctl.d/99-kubernetes-cri.conf
    state: absent

- name: Delete CNI network interfaces if they exist
  ansible.builtin.shell: |
    ip link delete cni0 2>/dev/null || true
    ip link delete flannel.1 2>/dev/null || true
    ip link delete ceph0 2>/dev/null || true
  no_log: true

- name: Flush all iptables rules and set default policies to ACCEPT
  ansible.builtin.shell: |
    iptables -F
    iptables -X
    iptables -t nat -F
    iptables -t nat -X
    iptables -t mangle -F
    iptables -t mangle -X
    iptables -P INPUT ACCEPT
    iptables -P FORWARD ACCEPT
    iptables -P OUTPUT ACCEPT

- name: Set defaults for partition and policy
  ansible.builtin.set_fact:
    partition_device: "{{ partition_device | default('/dev/nvme0n1p3') }}"
    perform_physical_disk_wipe: "{{ perform_physical_disk_wipe | default(false) }}"

- name: Check if partition device exists
  ansible.builtin.stat:
    path: "{{ partition_device }}"
  register: devstat

- name: Wipe filesystem signatures (only if device exists and wipe requested)
  when:
    - devstat.stat.exists
    - perform_physical_disk_wipe | bool
  ansible.builtin.command:
    cmd: "wipefs -af {{ partition_device }}"
  register: wipe_out
  changed_when: "'nothing to do' not in (wipe_out.stderr | default(''))"
  failed_when: false

- name: Remove all device mapper devices
  ansible.builtin.shell: dmsetup remove_all
  no_log: true
  ignore_errors: true

- name: Remove Ceph device mapper entries
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - /dev/mapper/ceph-*
    - /dev/ceph-*
  ignore_errors: true

- name: Remove systemd service override files for k3s and containerd
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/systemd/system/k3s*
    - /etc/systemd/system/containerd*

- name: Reload systemd daemon
  ansible.builtin.systemd:
    daemon_reload: yes

- name: Remove module load configuration files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/modules-load.d/k3s.conf
    - /etc/modules-load.d/rook-ceph.conf

- name: Restart systemd-networkd service
  ansible.builtin.systemd:
    name: systemd-networkd
    state: restarted
  ignore_errors: true

- name: Read filesystem type (no headers) if device exists
  when: devstat.stat.exists
  ansible.builtin.command:
    cmd: "lsblk -n -o FSTYPE {{ partition_device }}"
  register: fs_check
  changed_when: false
  failed_when: false

- name: Normalize detected filesystem (MISSING if device absent)
  ansible.builtin.set_fact:
    detected_fstype: >-
      {{ (fs_check.stdout | default('') | trim)
         if devstat.stat.exists else 'MISSING' }}

- name: Assert partition state matches policy
  ansible.builtin.assert:
    that:
      - >
        (perform_physical_disk_wipe | bool)
        | ternary(
            detected_fstype in ['', 'MISSING'],
            detected_fstype in ['', 'ceph_bluestore', 'MISSING']
          )
    fail_msg: >-
      Policy violation for {{ partition_device }} on {{ inventory_hostname }}.
      perform_physical_disk_wipe={{ perform_physical_disk_wipe | bool }} requires
      {{ (perform_physical_disk_wipe | bool) | ternary("empty", "empty or 'ceph_bluestore'") }},
      but found '{{ detected_fstype }}'.
    success_msg: >-
      {{ partition_device }} OK on {{ inventory_hostname }} (found '{{ detected_fstype or "empty" }}').
