---
# Step 1: Set KUBECONFIG globally
- name: Set KUBECONFIG global
  ansible.builtin.set_fact:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml

# Step 2: Delete existing OpenWebUI namespace if it exists
- name: Delete existing OpenWebUI namespace
  ansible.builtin.k8s:
    kubeconfig: "{{ KUBECONFIG }}"
    state: absent
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: openwebui
  ignore_errors: true

# Step 3: Wait for namespace to be fully deleted
- name: Wait for namespace to be fully deleted
  ansible.builtin.command: kubectl get namespace openwebui --kubeconfig {{ KUBECONFIG }}
  register: ns_check
  until: ns_check.rc != 0
  retries: 30
  delay: 2
  failed_when: false
  changed_when: false

# Step 4: Create new OpenWebUI namespace
- name: Create OpenWebUI namespace
  ansible.builtin.k8s:
    kubeconfig: "{{ KUBECONFIG }}"
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: openwebui

# Step 5: Create ArgoCD OpenWebUI Application
- name: Create OpenWebUI ArgoCD Application
  ansible.builtin.k8s:
    kubeconfig: "{{ KUBECONFIG }}"
    state: present
    definition:
      apiVersion: argoproj.io/v1alpha1
      kind: Application
      metadata:
        name: openwebui
        namespace: argocd
      spec:
        project: default
        source:
          repoURL: https://open-webui.github.io/helm-charts
          chart: open-webui
          targetRevision: "*"
          helm:
            valueFiles:
              - https://raw.githubusercontent.com/seadogger/seadogger-homelab/master/helm-deployments/openwebui/openwebui-values.yaml
        destination:
          server: https://kubernetes.default.svc
          namespace: openwebui
        syncPolicy:
          automated:
            prune: true
            selfHeal: true
          syncOptions:
            - CreateNamespace=true

# Step 6: Wait for OpenWebUI pod to be ready
- name: Wait for OpenWebUI pod to be running
  ansible.builtin.shell: |
    kubectl get pods -n openwebui --no-headers --kubeconfig {{ KUBECONFIG }} | grep -q '1/1 *Running'
  register: pod_check
  retries: 30
  delay: 10
  until: pod_check.rc == 0
  changed_when: false