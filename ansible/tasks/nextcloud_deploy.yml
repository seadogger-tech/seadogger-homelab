---
# Step 1: Set KUBECONFIG globally  
- name: Set KUBECONFIG global
  ansible.builtin.set_fact:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml
  tags: nextcloud

# Step 2: Remove ArgoCD Application first
- name: Delete existing Nextcloud ArgoCD application
  kubernetes.core.k8s:
    kubeconfig: "{{ KUBECONFIG }}"
    state: absent
    definition:
      apiVersion: argoproj.io/v1alpha1
      kind: Application
      metadata:
        name: nextcloud
        namespace: argocd
  ignore_errors: true
  tags: nextcloud

# Step 3: Wait for ArgoCD cleanup
- name: Wait for ArgoCD application deletion
  ansible.builtin.pause:
    seconds: 30
  tags: nextcloud

# Step 4: Delete all PVCs in nextcloud namespace
- name: Get list of PVCs in nextcloud namespace
  kubernetes.core.k8s_info:
    kubeconfig: "{{ KUBECONFIG }}"
    kind: PersistentVolumeClaim
    namespace: nextcloud
  register: pvc_list
  ignore_errors: true
  tags: nextcloud

- name: Delete found PVCs
  kubernetes.core.k8s:
    kubeconfig: "{{ KUBECONFIG }}"
    state: absent
    kind: PersistentVolumeClaim
    namespace: nextcloud
    name: "{{ item.metadata.name }}"
  loop: "{{ pvc_list.resources | default([]) }}"
  ignore_errors: true
  tags: nextcloud

# Step 5: Delete namespace
- name: Delete existing Nextcloud namespace
  kubernetes.core.k8s:
    kubeconfig: "{{ KUBECONFIG }}"
    state: absent
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: nextcloud
  ignore_errors: true
  tags: nextcloud

# Step 6: Wait for complete cleanup
- name: Wait for complete cleanup
  ansible.builtin.pause:
    seconds: 60
  tags: nextcloud

# Step 7: Create new Nextcloud namespace
- name: Create Nextcloud namespace
  kubernetes.core.k8s:
    kubeconfig: "{{ KUBECONFIG }}"
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: nextcloud
  tags: nextcloud

# Step 8: Create ArgoCD Nextcloud Application
- name: Create Nextcloud ArgoCD Application
  kubernetes.core.k8s:
    kubeconfig: "{{ KUBECONFIG }}"
    state: present
    definition:
      apiVersion: argoproj.io/v1alpha1
      kind: Application
      metadata:
        name: nextcloud
        namespace: argocd
      spec:
        project: default
        source:
          repoURL: https://nextcloud.github.io/helm/
          chart: nextcloud
          targetRevision: "3.5.14"
          helm:
            valueFiles:
              - https://raw.githubusercontent.com/seadogger/seadogger-homelab/master/helm-deployments/nextcloud/nextcloud-values.yaml
        destination:
          server: https://kubernetes.default.svc
          namespace: nextcloud
        syncPolicy:
          automated:
            prune: true
            selfHeal: true
          syncOptions:
            - CreateNamespace=true
  tags: nextcloud

# Step 9: Wait for initial deployment
- name: Wait for Nextcloud deployment through ArgoCD
  ansible.builtin.pause:
    minutes: 2
  tags: nextcloud

# Step 10: Create Nextcloud LoadBalancer Service
- name: Create Nextcloud LoadBalancer Service
  kubernetes.core.k8s:
    kubeconfig: "{{ KUBECONFIG }}"
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: nextcloud-lb
        namespace: nextcloud
        annotations:
          metallb.universe.tf/address-pool: default
          metallb.universe.tf/allow-shared-ip: nextcloud
          metallb.universe.tf/ip-allocated-from-pool: default
      spec:
        type: LoadBalancer
        ports:
          - name: http
            port: 80
            targetPort: 80
            protocol: TCP
        selector:
          app.kubernetes.io/instance: nextcloud
          app.kubernetes.io/name: nextcloud
        allocateLoadBalancerNodePorts: true
        externalTrafficPolicy: Cluster
        loadBalancerIP: "192.168.1.253"
  become: true        
  tags: nextcloud

# Step 11: Final wait for service availability
- name: Wait for LoadBalancer service to be ready
  ansible.builtin.pause:
    seconds: 30
  tags: nextcloud