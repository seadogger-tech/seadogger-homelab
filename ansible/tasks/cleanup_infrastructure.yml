---
- name: Set KUBECONFIG global
  ansible.builtin.set_fact:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml

# === Prometheus Cleanup ===
- name: "Clean up Prometheus"
  block:
    - name: "Delete Prometheus ArgoCD Application"
      kubernetes.core.k8s:
        kubeconfig: "{{ KUBECONFIG }}"
        state: absent
        kind: Application
        api_version: argoproj.io/v1alpha1
        name: prometheus-stack
        namespace: argocd
        wait: yes
        wait_timeout: 300
      ignore_errors: true

    - name: "Delete Prometheus CRDs"
      kubernetes.core.k8s:
        kubeconfig: "{{ KUBECONFIG }}"
        state: absent
        kind: CustomResourceDefinition
        name: "{{ item }}"
      loop:
        - "alertmanagerconfigs.monitoring.coreos.com"
        - "alertmanagers.monitoring.coreos.com"
        - "podmonitors.monitoring.coreos.com"
        - "probes.monitoring.coreos.com"
        - "prometheuses.monitoring.coreos.com"
        - "prometheusrules.monitoring.coreos.com"
        - "servicemonitors.monitoring.coreos.com"
        - "thanosrulers.monitoring.coreos.com"
      ignore_errors: true
  when: "'prometheus' in infrastructure_cleanup_list"

# === ArgoCD Cleanup ===
- name: "Clean up ArgoCD"
  block:
    - name: "Delete all ArgoCD Applications"
      kubernetes.core.k8s:
        kubeconfig: "{{ KUBECONFIG }}"
        state: absent
        kind: Application
        api_version: argoproj.io/v1alpha1
        namespace: argocd
        delete_options:
          propagationPolicy: Foreground
      ignore_errors: true

    - name: "Delete ArgoCD Helm release"
      kubernetes.core.helm:
        kubeconfig: "{{ KUBECONFIG }}"
        name: argocd
        release_namespace: argocd
        state: absent
        wait: yes
        wait_timeout: 300
      ignore_errors: true

    - name: "Delete ArgoCD Namespace"
      kubernetes.core.k8s:
        kubeconfig: "{{ KUBECONFIG }}"
        state: absent
        kind: Namespace
        name: argocd
        wait: yes
        wait_timeout: 600
      ignore_errors: true
  when: "'argocd' in infrastructure_cleanup_list"

# === MetalLB Cleanup ===
- name: "Clean up MetalLB"
  block:
    - name: "Delete MetalLB Custom Resources"
      kubernetes.core.k8s:
        kubeconfig: "{{ KUBECONFIG }}"
        src: "https://raw.githubusercontent.com/seadogger/seadogger-homelab/main/helm-deployments/metallb/metallb-values.yaml"
        state: absent
        wait: yes
        wait_timeout: 300
      ignore_errors: true

    - name: "Delete MetalLB Helm release"
      kubernetes.core.helm:
        kubeconfig: "{{ KUBECONFIG }}"
        name: metallb
        release_namespace: metallb-system
        state: absent
        wait: yes
        wait_timeout: 300
      ignore_errors: true

    - name: "Force remove finalizers from MetalLB namespace"
      kubernetes.core.k8s_json_patch:
        kubeconfig: "{{ KUBECONFIG }}"
        kind: Namespace
        name: metallb-system
        patch:
          - op: remove
            path: /metadata/finalizers
      ignore_errors: true

    - name: "Delete MetalLB Namespace"
      kubernetes.core.k8s:
        kubeconfig: "{{ KUBECONFIG }}"
        state: absent
        kind: Namespace
        name: metallb-system
        wait: yes
        wait_timeout: 600
      ignore_errors: true
  when: "'metallb' in infrastructure_cleanup_list"

# === Rook-Ceph Cleanup (The Critical Path) ===
- name: "Clean up Rook-Ceph"
  block:
    # Step 1: Teardown NFS services from part2.yml
    - name: "Ceph Cleanup: Delete NFS LoadBalancer Service"
      kubernetes.core.k8s:
        kubeconfig: "{{ KUBECONFIG }}"
        state: absent
        kind: Service
        name: rook-nfs-loadbalancer
        namespace: rook-ceph
      ignore_errors: true

    - name: "Ceph Cleanup: Delete CephNFS CRD"
      kubernetes.core.k8s:
        kubeconfig: "{{ KUBECONFIG }}"
        state: absent
        kind: CephNFS
        api_version: ceph.rook.io/v1
        name: nfs-ec
        namespace: rook-ceph
        wait: yes
        wait_timeout: 300
      ignore_errors: true

    # Step 2: Delete Storage Classes and Filesystem
    - name: "Ceph Cleanup: Delete StorageClasses"
      kubernetes.core.k8s:
        kubeconfig: "{{ KUBECONFIG }}"
        state: absent
        kind: StorageClass
        name: "{{ item }}"
      loop:
        - rook-ceph-filesystem-ec
        - rook-ceph-nfs
        - ceph-block
      ignore_errors: true

    - name: "Force remove finalizers from CephFilesystem"
      kubernetes.core.k8s_json_patch:
        kubeconfig: "{{ KUBECONFIG }}"
        kind: CephFilesystem
        api_version: ceph.rook.io/v1
        name: ec-fs
        namespace: rook-ceph
        patch:
          - op: remove
            path: /metadata/finalizers
      ignore_errors: true

    - name: "Ceph Cleanup: Delete CephFilesystem CRD"
      kubernetes.core.k8s:
        kubeconfig: "{{ KUBECONFIG }}"
        state: absent
        kind: CephFilesystem
        api_version: ceph.rook.io/v1
        name: ec-fs
        namespace: rook-ceph
        wait: yes
        wait_timeout: 300
      ignore_errors: true

    # Step 3: Uninstall Helm Charts (Cluster then Operator)
    - name: "Ceph Cleanup: Uninstall Helm charts"
      ansible.builtin.shell: "helm uninstall {{ item }} -n rook-ceph"
      loop:
        - rook-ceph-cluster
        - rook-ceph
      ignore_errors: true

    # Step 4: Delete the namespace
    - name: "Ceph Cleanup: Delete rook-ceph namespace"
      kubernetes.core.k8s:
        kubeconfig: "{{ KUBECONFIG }}"
        state: absent
        kind: Namespace
        name: rook-ceph
        wait: yes
        wait_timeout: 900
      ignore_errors: true

    # Step 5: Delete Rook-Ceph CRDs (LAST STEP)
    - name: "Ceph Cleanup: Delete Rook-Ceph CRDs"
      kubernetes.core.k8s:
        kubeconfig: "{{ KUBECONFIG }}"
        state: absent
        kind: CustomResourceDefinition
        name: "{{ item }}"
      loop:
        - "cephblockpools.ceph.rook.io"
        - "cephclients.ceph.rook.io"
        - "cephclusters.ceph.rook.io"
        - "cephfilesystems.ceph.rook.io"
        - "cephnfses.ceph.rook.io"
        - "cephobjectstores.ceph.rook.io"
        - "cephobjectstoreusers.ceph.rook.io"
        - "cephobjectrealms.ceph.rook.io"
        - "cephobjectzonegroups.ceph.rook.io"
        - "cephobjectzones.ceph.rook.io"
        - "cephrbdmirrors.ceph.rook.io"
      ignore_errors: true
  when: "'rook-ceph' in infrastructure_cleanup_list"
