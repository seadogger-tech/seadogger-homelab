---
- name: Configure Raspberry Pi Cluster
  hosts: cluster
  gather_facts: true
  become: true

  handlers:
    - name: reboot-pi
      ansible.builtin.reboot:

  vars_files:
    - config.yml

  tasks:
    - name: Update apt package cache
      apt:
        update_cache: yes

    - name: Ensure cgroups are configured correctly in cmdline.txt.
      ansible.builtin.replace:
        path: /boot/firmware/cmdline.txt
        regexp: '^([\w](?!.*\b{{ item }}\b).*)$'
        replace: '\1 {{ item }}'
      with_items:
        - "cgroup_memory=1"
        - "cgroup_enable=memory"
      notify: reboot-pi
      when: ansible_distribution == 'Debian'

    - name: Install necessary packages
      apt:
        name:
          - btop
          - iptables
          - open-iscsi
          - nfs-common
          - util-linux
          - cryptsetup
          - git
        state: present

    - name: Enable and start iscsid service
      systemd:
        name: iscsid
        enabled: yes
        state: started

    - name: Ensure PCIe settings exist in config.txt
      blockinfile:
        path: /boot/firmware/config.txt
        block: |
          dtparam=pciex1
          dtparam=pciex1_gen=3
          boot_delay=1
          rootwait
        marker: "# {mark} NVMe Boot Settings"
      notify: reboot-pi    

    - name: Load dm_crypt kernel module
      command: modprobe dm_crypt
      changed_when: false

    - name: Load rbd kernel module
      command: modprobe rbd
      changed_when: false

    - name: Append dm_crypt and rbd to /etc/modules
      lineinfile:
        path: /etc/modules
        line: "{{ item }}"
        create: yes
      loop:
        - "dm_crypt"
        - "rbd"

    - name: Update Raspberry Pi firmware to latest
      command: rpi-update
      register: rpi_update
      changed_when: "'Firmware update' in rpi_update.stdout"


#- name: Configure storage node.
#  hosts: storage
#  gather_facts: false
#  become: true

#  handlers:
#    - name: restart nfs
#      ansible.builtin.service:
#        name: nfs-server
#        state: restarted

#  vars_files:
#    - config.yml

#  tasks:
#    - name: Set up storage.
#      include_tasks: tasks/storage/{{ storage_type }}.yml


- name: Configure the control plane.
  hosts: control_plane
  gather_facts: false
  become: true

  vars_files:
    - config.yml

  tasks:
#    - name: Install K3s on control plane (takes a while).
#      ansible.builtin.shell: >-
#        ~/k3s_install.sh >> ~/k3s_install_log.txt
#      args:
#        chdir: "~"
#        creates: /var/lib/rancher/k3s/server/node-token

#    - name: Get node token.
#      ansible.builtin.command: cat /var/lib/rancher/k3s/server/node-token
#      changed_when: false
#      register: node_token_output

#    - name: Set node_token fact.
#      ansible.builtin.set_fact:
#        node_token: "{{ node_token_output.stdout_lines[0] }}"

#    - name: Ignore PEP 668 because it's silly.
#      ansible.builtin.file:
#        path: /usr/lib/python3.11/EXTERNALLY-MANAGED
#        state: absent
#      become: true


- name: Configure the worker nodes.
  hosts: nodes
  gather_facts: false
  become: true

  vars_files:
    - config.yml

  tasks:
#    - name: Install K3s on nodes (takes a while).
#      ansible.builtin.shell: >-
#        K3S_URL="https://{{ groups['control_plane'][0] }}:6443"
#        K3S_TOKEN="{{ hostvars[groups['control_plane'][0]]['node_token'] }}"
#        ~/k3s_install.sh >> ~/k3s_install_log.txt
#      args:
#        chdir: "~"
#        creates: /var/lib/rancher/k3s/agent/kubelet.kubeconfig
